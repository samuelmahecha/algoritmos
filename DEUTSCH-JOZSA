import numpy as np
from qiskit import QuantumCircuit, transpile
from qiskit import Aer
from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit
from qiskit.visualization import plot_histogram
import matplotlib.pyplot as plt

simulator = Aer.get_backend('qasm_simulator')

circuit = QuantumCircuit(2, 2)


qreg_q = QuantumRegister(4, 'q')
creg_c = ClassicalRegister(4, 'c')
circuit = QuantumCircuit(qreg_q, creg_c)





circuit.barrier()
circuit.x(2)
circuit.barrier()


circuit.measure(0,2)
circuit.measure(1, 1)
circuit.measure(2, 0)

compiled_circuit = transpile(circuit, simulator)

job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print("\nTotal count for 00 and 11 are:",counts)
print(circuit)
plot_histogram(counts)
plt.show()

#######2


simulator = Aer.get_backend('qasm_simulator')

circuit = QuantumCircuit(2, 2)


qreg_q = QuantumRegister(4, 'q')
creg_c = ClassicalRegister(4, 'c')
circuit = QuantumCircuit(qreg_q, creg_c)




circuit.x(2)
circuit.barrier()
circuit.x(2)
circuit.barrier()


circuit.measure(0,2)
circuit.measure(1, 1)
circuit.measure(2, 0)

compiled_circuit = transpile(circuit, simulator)

job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print("\nTotal count for 00 and 11 are:",counts)
print(circuit)
plot_histogram(counts)
plt.show()

#######3


simulator = Aer.get_backend('qasm_simulator')

circuit = QuantumCircuit(2, 2)


qreg_q = QuantumRegister(4, 'q')
creg_c = ClassicalRegister(4, 'c')
circuit = QuantumCircuit(qreg_q, creg_c)



circuit.x(1)

circuit.barrier()
circuit.x(2)
circuit.barrier()


circuit.measure(0,2)
circuit.measure(1, 1)
circuit.measure(2, 0)

compiled_circuit = transpile(circuit, simulator)

job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print("\nTotal count for 00 and 11 are:",counts)
print(circuit)
plot_histogram(counts)
plt.show()

############4

simulator = Aer.get_backend('qasm_simulator')

circuit = QuantumCircuit(2, 2)


qreg_q = QuantumRegister(4, 'q')
creg_c = ClassicalRegister(4, 'c')
circuit = QuantumCircuit(qreg_q, creg_c)



circuit.x(1)
circuit.x(2)

circuit.barrier()
circuit.x(2)
circuit.barrier()


circuit.measure(0,2)
circuit.measure(1, 1)
circuit.measure(2, 0)

compiled_circuit = transpile(circuit, simulator)

job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print("\nTotal count for 00 and 11 are:",counts)
print(circuit)
plot_histogram(counts)
plt.show()


##########5

simulator = Aer.get_backend('qasm_simulator')

circuit = QuantumCircuit(2, 2)


qreg_q = QuantumRegister(4, 'q')
creg_c = ClassicalRegister(4, 'c')
circuit = QuantumCircuit(qreg_q, creg_c)


circuit.x(0)



circuit.barrier()
circuit.x(2)
circuit.barrier()


circuit.measure(0,2)
circuit.measure(1, 1)
circuit.measure(2, 0)

compiled_circuit = transpile(circuit, simulator)

job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print("\nTotal count for 00 and 11 are:",counts)
print(circuit)
plot_histogram(counts)
plt.show()

############# 6

simulator = Aer.get_backend('qasm_simulator')

circuit = QuantumCircuit(2, 2)


qreg_q = QuantumRegister(4, 'q')
creg_c = ClassicalRegister(4, 'c')
circuit = QuantumCircuit(qreg_q, creg_c)



circuit.x(0)
circuit.x(2)

circuit.barrier()
circuit.x(2)
circuit.barrier()


circuit.measure(0,2)
circuit.measure(1, 1)
circuit.measure(2, 0)

compiled_circuit = transpile(circuit, simulator)

job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print("\nTotal count for 00 and 11 are:",counts)
print(circuit)
plot_histogram(counts)
plt.show()

#########7

simulator = Aer.get_backend('qasm_simulator')

circuit = QuantumCircuit(2, 2)


qreg_q = QuantumRegister(4, 'q')
creg_c = ClassicalRegister(4, 'c')
circuit = QuantumCircuit(qreg_q, creg_c)



circuit.x(0)
circuit.x(1)


circuit.barrier()
circuit.x(2)
circuit.barrier()


circuit.measure(0,2)
circuit.measure(1, 1)
circuit.measure(2, 0)

compiled_circuit = transpile(circuit, simulator)

job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print("\nTotal count for 00 and 11 are:",counts)
print(circuit)
plot_histogram(counts)
plt.show()

#########8
simulator = Aer.get_backend('qasm_simulator')

circuit = QuantumCircuit(2, 2)


qreg_q = QuantumRegister(4, 'q')
creg_c = ClassicalRegister(4, 'c')
circuit = QuantumCircuit(qreg_q, creg_c)


circuit.x(0)
circuit.x(1)
circuit.x(2)

circuit.barrier()
circuit.x(2)
circuit.barrier()


circuit.measure(0,2)
circuit.measure(1, 1)
circuit.measure(2, 0)

compiled_circuit = transpile(circuit, simulator)

job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print("\nTotal count for 00 and 11 are:",counts)
print(circuit)
plot_histogram(counts)
plt.show()



#funcion 2 


simulator = Aer.get_backend('qasm_simulator')

circuit = QuantumCircuit(2, 2)


qreg_q = QuantumRegister(4, 'q')
creg_c = ClassicalRegister(4, 'c')
circuit = QuantumCircuit(qreg_q, creg_c)





circuit.barrier()
circuit.cx(0,2)
circuit.cx(1,2)
circuit.barrier()


circuit.measure(0,2)
circuit.measure(1, 1)
circuit.measure(2, 0)

compiled_circuit = transpile(circuit, simulator)

job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print("\nTotal count for 00 and 11 are:",counts)
print(circuit)
plot_histogram(counts)
plt.show()


######2

simulator = Aer.get_backend('qasm_simulator')

circuit = QuantumCircuit(2, 2)


qreg_q = QuantumRegister(4, 'q')
creg_c = ClassicalRegister(4, 'c')
circuit = QuantumCircuit(qreg_q, creg_c)


circuit.x(2)


circuit.barrier()
circuit.cx(0,2)
circuit.cx(1,2)
circuit.barrier()


circuit.measure(0,2)
circuit.measure(1, 1)
circuit.measure(2, 0)

compiled_circuit = transpile(circuit, simulator)

job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print("\nTotal count for 00 and 11 are:",counts)
print(circuit)
plot_histogram(counts)
plt.show()

##########3
simulator = Aer.get_backend('qasm_simulator')

circuit = QuantumCircuit(2, 2)


qreg_q = QuantumRegister(4, 'q')
creg_c = ClassicalRegister(4, 'c')
circuit = QuantumCircuit(qreg_q, creg_c)



circuit.x(1)

circuit.barrier()
circuit.cx(0,2)
circuit.cx(1,2)
circuit.barrier()


circuit.measure(0,2)
circuit.measure(1, 1)
circuit.measure(2, 0)

compiled_circuit = transpile(circuit, simulator)

job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print("\nTotal count for 00 and 11 are:",counts)
print(circuit)
plot_histogram(counts)
plt.show()

#########4

simulator = Aer.get_backend('qasm_simulator')

circuit = QuantumCircuit(2, 2)


qreg_q = QuantumRegister(4, 'q')
creg_c = ClassicalRegister(4, 'c')
circuit = QuantumCircuit(qreg_q, creg_c)


circuit.x(1)
circuit.x(2)

circuit.barrier()
circuit.cx(0,2)
circuit.cx(1,2)
circuit.barrier()


circuit.measure(0,2)
circuit.measure(1, 1)
circuit.measure(2, 0)

compiled_circuit = transpile(circuit, simulator)

job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print("\nTotal count for 00 and 11 are:",counts)
print(circuit)
plot_histogram(counts)
plt.show()


#########5

simulator = Aer.get_backend('qasm_simulator')

circuit = QuantumCircuit(2, 2)


qreg_q = QuantumRegister(4, 'q')
creg_c = ClassicalRegister(4, 'c')
circuit = QuantumCircuit(qreg_q, creg_c)


circuit.x(0)


circuit.barrier()
circuit.cx(0,2)
circuit.cx(1,2)
circuit.barrier()


circuit.measure(0,2)
circuit.measure(1, 1)
circuit.measure(2, 0)

compiled_circuit = transpile(circuit, simulator)

job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print("\nTotal count for 00 and 11 are:",counts)
print(circuit)
plot_histogram(counts)
plt.show()
##########6

simulator = Aer.get_backend('qasm_simulator')

circuit = QuantumCircuit(2, 2)


qreg_q = QuantumRegister(4, 'q')
creg_c = ClassicalRegister(4, 'c')
circuit = QuantumCircuit(qreg_q, creg_c)


circuit.x(0)
circuit.x(2)


circuit.barrier()
circuit.cx(0,2)
circuit.cx(1,2)
circuit.barrier()


circuit.measure(0,2)
circuit.measure(1, 1)
circuit.measure(2, 0)

compiled_circuit = transpile(circuit, simulator)

job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print("\nTotal count for 00 and 11 are:",counts)
print(circuit)
plot_histogram(counts)
plt.show()

########7

simulator = Aer.get_backend('qasm_simulator')

circuit = QuantumCircuit(2, 2)


qreg_q = QuantumRegister(4, 'q')
creg_c = ClassicalRegister(4, 'c')
circuit = QuantumCircuit(qreg_q, creg_c)

circuit.x(0)
circuit.x(1)

circuit.barrier()
circuit.cx(0,2)
circuit.cx(1,2)
circuit.barrier()


circuit.measure(0,2)
circuit.measure(1, 1)
circuit.measure(2, 0)

compiled_circuit = transpile(circuit, simulator)

job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print("\nTotal count for 00 and 11 are:",counts)
print(circuit)
plot_histogram(counts)
plt.show()

#############8
simulator = Aer.get_backend('qasm_simulator')

circuit = QuantumCircuit(2, 2)


qreg_q = QuantumRegister(4, 'q')
creg_c = ClassicalRegister(4, 'c')
circuit = QuantumCircuit(qreg_q, creg_c)

circuit.x(0)
circuit.x(1)
circuit.x(2)


circuit.barrier()
circuit.cx(0,2)
circuit.cx(1,2)
circuit.barrier()


circuit.measure(0,2)
circuit.measure(1, 1)
circuit.measure(2, 0)

compiled_circuit = transpile(circuit, simulator)

job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print("\nTotal count for 00 and 11 are:",counts)
print(circuit)
plot_histogram(counts)
plt.show()
